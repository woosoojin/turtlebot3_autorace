<launch>
  <arg name="calibration_mode" value="action"/>
  <arg name="use_gazebo" value="false"/>

    <group if="$(arg use_gazebo)">
      <!-- image transport from compressed to raw -->
      <node pkg="image_transport" type="republish" name="republish" args="compressed">
        <remap from="in"  to="camera/rgb/image_raw" />
        <remap from="out"   to="camera/image"/>
      </node>
      <node pkg="topic_tools" type="relay" name="relay_camera_info" args="/camera/rgb/camera_info /camera/camera_info"/>
    </group>

    <group unless="$(arg use_gazebo)">
      <!-- image transport from compressed to raw -->
      <node pkg="image_transport" type="republish" name="republish" args="compressed in:=camera/image raw out:=camera/image" />
    </group>

  <!-- run the following under action mode -->
  <!-- image rectification -->
  <node if="$(eval calibration_mode == 'action')" ns="camera" pkg="image_proc" type="image_proc" name="image_proc" args="_approximate_sync:=true" output="screen">
    <remap from="image_raw" to="image" />
    <param name="queue_size" value="20" />
  </node>

  <!-- launch turtlebot3_autorace_intrinsic_camera_calibration.launch in the raspberry pi before launch this file -->
  <group ns="camera">
    <!-- image brightness & contrast compensation of ground-projected image -->
    <node pkg="turtlebot3_autorace_camera" type="image_compensation" name="image_compensation" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/compensation.yaml" />
      <param if="$(eval calibration_mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval calibration_mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>
      <remap from="/camera/image_input" to="/camera/image_rect_color" />
      <remap from="/camera/image_input/compressed" to="/camera/image_rect_color/compressed" />
      <remap from="/camera/image_output" to="/camera/image_compensated" />
      <remap from="/camera/image_output/compressed" to="/camera/image_compensated/compressed" />
    </node>

    <!-- image ground projection -->
    <node pkg="turtlebot3_autorace_camera" type="image_projection" name="image_projection" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/projection.yaml" />
      <param if="$(eval calibration_mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval calibration_mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>    
      <remap from="/camera/image_input" to="/camera/image_rect_color" />
      <remap from="/camera/image_input/compressed" to="/camera/image_rect_color/compressed" />
      <remap from="/camera/image_output" to="/camera/image_projected" />
      <remap from="/camera/image_output/compressed" to="/camera/image_projected/compressed" />
      <remap from="/camera/image_calib" to="/camera/image_extrinsic_calib" />
      <remap from="/camera/image_calib/compressed" to="/camera/image_extrinsic_calib/compressed" />
    </node>

    <!-- image brightness & contrast compensation of ground-projected image -->
    <node pkg="turtlebot3_autorace_camera" type="image_compensation" name="image_compensation_projection" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/compensation.yaml" />
      <param if="$(eval calibration_mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval calibration_mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>    
      <remap from="/camera/image_input" to="/camera/image_projected" />
      <remap from="/camera/image_input/compressed" to="/camera/image_projected/compressed" />
      <remap from="/camera/image_output" to="/camera/image_projected_compensated" />
      <remap from="/camera/image_output/compressed" to="/camera/image_projected_compensated/compressed" />
    </node>
  </group>

   <node pkg="turtlebot3_autorace_detect" type="detect_sign" name="detect_sign" output="screen">
    <remap from="/detect/image_input" to="/camera/image_compensated" />
    <remap from="/detect/image_input/compressed" to="/camera/image_compensated/compressed" />
    <remap from="/detect/image_output" to="/detect/image_traffic_sign" />
    <remap from="/detect/image_output/compressed" to="/detect/image_traffic_sign/compressed" />    
  </node>
</launch>
